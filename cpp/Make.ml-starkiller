MLREACTIONS_HOME ?= /home/dorefan/ml-reactions

TOP := /home/dorefan

# Microphysics and AMReX are needed to compile code.

MICROPHYSICS_HOME ?= $(TOP)/Microphysics

AMREX_HOME ?= $(TOP)/amrex

# Require C++17
CXXSTD := c++17

USE_FORT_MICROPHYSICS ?= TRUE
ifeq ($(USE_FORT_MICROPHYSICS), TRUE)
  DEFINES += -DMICROPHYSICS_FORT
endif

# default is not to compile with CUDA
USE_CUDA ?= FALSE

CUDA_VERBOSE ?= FALSE

# default is not to compile in the conductivity
USE_CONDUCTIVITY ?= FALSE

# Check to make sure that Microphysics actually exists,
# using an arbitrary file that must exist to check.
# Throw an error if we don't have Microphysics.
ifeq ("$(wildcard $(MICROPHYSICS_HOME)/Make.Microphysics)","")
  $(error Microphysics has not been downloaded.)
endif

# default microphysics locations
EOS_HOME     ?= $(MICROPHYSICS_HOME)/EOS
NETWORK_HOME ?= $(MICROPHYSICS_HOME)/networks
CONDUCTIVITY_HOME    ?= $(MICROPHYSICS_HOME)/conductivity

INTEGRATOR_DIR ?= $(MICROPHYSICS_HOME)/integration/VODE

EBASE := ml-starkiller

# EXTERN_CORE is simply a list of the directories we use in EOS,
# Networks and Util this list will be searched for runtime parameters
EXTERN_CORE ?=

# need to put any build suffices before Make.defs
ifdef USE_CUDA
  ifeq ($(USE_CUDA), TRUE)
    USE_GPU_PRAGMA = TRUE
    DEFINES += -DCUDA
  endif
endif

include $(AMREX_HOME)/Tools/GNUMake/Make.defs

MLREACTIONS_AUTO_SOURCE_DIR := $(TmpBuildDir)/mlreactions_sources/$(optionsSuffix).EXE

all: $(executable)
	@echo SUCCESS

# If using a coarse grained OMP approach
DEFINES += -DCRSEGRNDOMP

# If we need to compute additional thermodynamic derivatives in the EOS
DEFINES += -DEXTRA_THERMO

USE_MG = FALSE

#------------------------------------------------------------------------------
# starkiller directories
#------------------------------------------------------------------------------

Bdirs 	:= cpp/starkiller

# add / define any special physics we need
#
#

Bpack	+= $(foreach dir, $(Bdirs), $(MLREACTIONS_HOME)/$(dir)/Make.package)
Blocs   += $(foreach dir, $(Bdirs), $(MLREACTIONS_HOME)/$(dir))

#------------------------------------------------------------------------------
# PyTorch
#------------------------------------------------------------------------------

# Torch directories -- note the Make.package for these adds these
# directories into INCLUDE_LOCATIONS and LIBRARY_LOCATIONS for us,
# so we don't need to do it here

PYTORCH_ROOT := $(MLREACTIONS_HOME)/cpp/libtorch

TORCH_LIBPATH = $(PYTORCH_ROOT)/lib

ifeq ($(USE_CUDA),TRUE)
  TORCH_LIBS = -ltorch -lc10 -lc10_cuda -lcuda  # -lcaffe2 -lcaffe2_gpu -lnvrtc -lnvToolsExt -lnccl -lmkldnn -lmkl_rt
else
  TORCH_LIBS = -ltorch -ltorch_cpu -lc10  # -lcaffe2
endif

INCLUDE_LOCATIONS += $(PYTORCH_ROOT)/include $(PYTORCH_ROOT)/include/torch/csrc/api/include
LIBRARY_LOCATIONS += $(TORCH_LIBPATH)

DEFINES += -D_GLIBCXX_USE_CXX11_ABI=1
LDFLAGS += -Wl,--no-as-needed,-rpath=$(TORCH_LIBPATH) $(TORCH_LIBS)

#------------------------------------------------------------------------------
# AMReX
#------------------------------------------------------------------------------

# core AMReX directories -- note the Make.package for these adds these
# directories into VPATH_LOCATIONS and INCLUDE_LOCATIONS for us, so we
# don't need to do it here

Pdirs 	:= Base Boundary AmrCore

Bpack	+= $(foreach dir, $(Pdirs), $(AMREX_HOME)/Src/$(dir)/Make.package)

INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)

#------------------------------------------------------------------------------
# Microphysics
#------------------------------------------------------------------------------

# Specify that we want to write any automatically generated network
# file (including the general_null network) to our temporary build
# directory
NETWORK_OUTPUT_PATH = $(MLREACTIONS_AUTO_SOURCE_DIR)

USE_CONDUCTIVITY := TRUE

USE_CXX_EOS := TRUE

USE_CXX_REACTIONS := TRUE

USE_REACT := TRUE
DEFINES += -DREACTIONS

include $(MICROPHYSICS_HOME)/Make.Microphysics_extern

Bpack += $(foreach dir, $(EXTERN_CORE), $(dir)/Make.package)
Blocs += $(foreach dir, $(EXTERN_CORE), $(dir))


#------------------------------------------------------------------------------
# external libraries
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# include all of the necessary directories
#------------------------------------------------------------------------------

include $(Bpack)

INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)

#include $(AMREX_HOME)/Src/LinearSolvers/C_to_F_MG/Make.package
#include $(AMREX_HOME)/Src/LinearSolvers/F_MG/FParallelMG.mak
#include $(AMREX_HOME)/Src/F_BaseLib/FParallelMG.mak


#------------------------------------------------------------------------------
# make generated source files location
#------------------------------------------------------------------------------
VPATH_LOCATIONS += $(MLREACTIONS_AUTO_SOURCE_DIR)
INCLUDE_LOCATIONS += $(MLREACTIONS_AUTO_SOURCE_DIR)


#------------------------------------------------------------------------------
# runtime parameters
#------------------------------------------------------------------------------

# runtime parameter support for extern/ routines
ifeq ($(USE_FORT_MICROPHYSICS), TRUE)
  F90EXE_sources += extern.F90
  F90EXE_headers += extern_parameters_F.H
endif

CEXE_sources += extern_parameters.cpp
CEXE_headers += extern_parameters.H

# for dependency resolution

AUTO_BUILD_SOURCES += $(MLREACTIONS_AUTO_SOURCE_DIR)/extern_parameters.H

EXTERN_TEMPLATE := $(MICROPHYSICS_HOME)/interfaces/extern_probin.template

# these are for finding runtime parameters
EXTERN_SEARCH += $(EXTERN_CORE)
ifdef MICROPHYSICS_HOME
   EXTERN_SEARCH += $(MICROPHYSICS_HOME)/networks/
endif
EXTERN_PARAMETERS := $(foreach dir, $(EXTERN_SEARCH),$(realpath $(wildcard $(dir)/_parameters)))

ifeq ($(USE_FORT_MICROPHYSICS), TRUE)
   extern_fort_opts = -t $(EXTERN_TEMPLATE) -o $(MLREACTIONS_AUTO_SOURCE_DIR)/extern.F90 -n extern --with_fortran
else
   extern_fort_opts =
endif

$(MLREACTIONS_AUTO_SOURCE_DIR)/extern.F90: $(MLREACTIONS_AUTO_SOURCE_DIR)/extern_parameters.H
$(MLREACTIONS_AUTO_SOURCE_DIR)/extern_parameters.cpp: $(MLREACTIONS_AUTO_SOURCE_DIR)/extern_parameters.H

$(MLREACTIONS_AUTO_SOURCE_DIR)/extern_parameters.H: $(EXTERN_PARAMETERS) $(EXTERN_TEMPLATE)
	@if [ ! -d $(MLREACTIONS_AUTO_SOURCE_DIR) ]; then mkdir -p $(MLREACTIONS_AUTO_SOURCE_DIR); fi
	$(MICROPHYSICS_HOME)/util/build_scripts/write_probin.py $(extern_fort_opts) \
           --cxx_prefix $(MLREACTIONS_AUTO_SOURCE_DIR)/extern \
           --pa "$(EXTERN_PARAMETERS)"

# for debugging
test_extern_params: $(MLREACTIONS_AUTO_SOURCE_DIR)/extern_parameters.cpp

#------------------------------------------------------------------------------
# build info
#------------------------------------------------------------------------------

# job_info support
CEXE_headers += $(AMREX_HOME)/Tools/C_scripts/AMReX_buildInfo.H
INCLUDE_LOCATIONS +=  $(AMREX_HOME)/Tools/C_scripts


MNAMES := EOS=$(EOS_PATH) NETWORK=$(NETWORK_PATH) INTEGRATOR=$(INTEGRATOR_DIR)
MNAMES += CONDUCTIVITY=$(CONDUCTIVITY_PATH)

# we make AMReX_buildInfo.cpp as we make the .o file, so we can delete
# it immediately.  this way if the build is interrupted, we are
# guaranteed to remake it

objForExecs += $(objEXETempDir)/AMReX_buildInfo.o

.FORCE:
.PHONE: .FORCE

# set BUILD_GIT_NAME and BUILD_GIT_DIR if you are building in a
# git-controlled dir not under ML-REACTIONS/
EXTRA_BUILD_INFO :=
ifdef BUILD_GIT_NAME
   EXTRA_BUILD_INFO := --build_git_name "$(BUILD_GIT_NAME)" \
                       --build_git_dir "$(BUILD_GIT_DIR)"
endif

$(objEXETempDir)/AMReX_buildInfo.o: .FORCE
	$(AMREX_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --amrex_home "$(AMREX_HOME)" \
          --COMP "$(COMP)" --COMP_VERSION "$(COMP_VERSION)" \
          --CXX_comp_name "$(CXX)" --CXX_flags "$(CXXFLAGS) $(CPPFLAGS) $(includes)" \
          --F_comp_name "$(F90)" --F_flags "$(F90FLAGS)" \
          --link_flags "$(LDFLAGS)" --libraries "$(libraries)" \
          --MODULES "$(MNAMES)" $(EXTRA_BUILD_INFO) \
          --GIT "$(MLREACTIONS_HOME) $(AMREX_HOME) $(MICROPHYSICS_HOME)"
	$(SILENT) $(CCACHE) $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $(CXXEXEFLAGS) AMReX_buildInfo.cpp -o $(objEXETempDir)/AMReX_buildInfo.o
	$(SILENT) $(RM) AMReX_buildInfo.cpp


#------------------------------------------------------------------------------
# finish up
#------------------------------------------------------------------------------

include $(AMREX_HOME)/Tools/GNUMake/Make.rules

ifeq ($(USE_CUDA),TRUE)
ifeq ($(USE_GPU_PRAGMA), TRUE)

#include $(TOP)/Exec/Make.cuda_rules

endif
endif

clean::
	$(SILENT) $(RM) extern.F90
	$(SILENT) $(RM) network_properties.F90 network_properties.H
	$(SILENT) $(RM) AMReX_buildInfo.cpp
	$(SILENT) $(RM) $(MLREACTIONS_AUTO_SOURCE_DIR)/*.H $(MLREACTIONS_AUTO_SOURCE_DIR)/*.[fF]90

clean::
	$(RM) network.f90
	$(RM) extern.f90
	@if [ -L helm_table.dat ]; then rm -f helm_table.dat; fi


# for debugging.  To see the value of a Makefile variable,
# e.g. Fmlocs, simply do "make print-Fmlocs".  This will print out the
# value.

print-%::
	@echo "$* is $($*)"
	@$(RM) AMReX_buildInfo.cpp
