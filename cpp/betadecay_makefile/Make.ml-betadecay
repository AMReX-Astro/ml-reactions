MLREACTIONS_HOME ?= /home/dorefan/ml-reactions

TOP := /home/dorefan

# AMReX is needed to compile code.

AMREX_HOME ?= $(TOP)/amrex

# Require C++17
CXXSTD := c++17

EBASE := ml-betadecay

# EXTERN_CORE is simply a list of the directories we use in EOS,
# Networks and Util this list will be searched for runtime parameters
EXTERN_CORE ?=

# need to put any build suffices before Make.defs
ifeq ($(USE_CUDA),TRUE)
  USE_GPU_PRAGMA = TRUE
  DEFINES += -DCUDA
endif

include $(AMREX_HOME)/Tools/GNUMake/Make.defs

all: $(executable)
	@echo SUCCESS

# If using a coarse grained OMP approach
DEFINES += -DCRSEGRNDOMP

USE_MG = FALSE

#------------------------------------------------------------------------------
# betadecay_makefile directories
#------------------------------------------------------------------------------

Bdirs 	:= cpp/betadecay_makefile

# add / define any special physics we need
#
#

Bpack	+= $(foreach dir, $(Bdirs), $(MLREACTIONS_HOME)/$(dir)/Make.package)
Blocs   += $(foreach dir, $(Bdirs), $(MLREACTIONS_HOME)/$(dir))

#------------------------------------------------------------------------------
# PyTorch
#------------------------------------------------------------------------------

# Torch directories -- note the Make.package for these adds these
# directories into INCLUDE_LOCATIONS and LIBRARY_LOCATIONS for us,
# so we don't need to do it here

PYTORCH_ROOT := $(MLREACTIONS_HOME)/cpp/libtorch

TORCH_LIBPATH = $(PYTORCH_ROOT)/lib

ifeq ($(USE_CUDA),TRUE)
  TORCH_LIBS = -ltorch -lc10 -lc10_cuda -lcuda  # -lcaffe2 -lcaffe2_gpu -lnvrtc -lnvToolsExt -lnccl -lmkldnn -lmkl_rt
else
  TORCH_LIBS = -ltorch -ltorch_cpu -lc10 #-lcaffe2
endif

INCLUDE_LOCATIONS += $(PYTORCH_ROOT)/include \
                     $(PYTORCH_ROOT)/include/torch/csrc/api/include
LIBRARY_LOCATIONS += $(TORCH_LIBPATH)

DEFINES += -D_GLIBCXX_USE_CXX11_ABI=1
LDFLAGS += -Wl,--no-as-needed,-rpath=$(TORCH_LIBPATH) $(TORCH_LIBS)

#------------------------------------------------------------------------------
# AMReX
#------------------------------------------------------------------------------

# core AMReX directories -- note the Make.package for these adds these
# directories into VPATH_LOCATIONS and INCLUDE_LOCATIONS for us, so we
# don't need to do it here

Pdirs 	:= Base Boundary AmrCore

Bpack	+= $(foreach dir, $(Pdirs), $(AMREX_HOME)/Src/$(dir)/Make.package)

INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)

#------------------------------------------------------------------------------
# external libraries
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# include all of the necessary directories
#------------------------------------------------------------------------------

include $(Bpack)

INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)

#include $(AMREX_HOME)/Src/LinearSolvers/C_to_F_MG/Make.package
#include $(AMREX_HOME)/Src/LinearSolvers/F_MG/FParallelMG.mak
#include $(AMREX_HOME)/Src/F_BaseLib/FParallelMG.mak

#------------------------------------------------------------------------------
# runtime parameters
#------------------------------------------------------------------------------

ifdef USE_CUDA
  ifeq ($(USE_CUDA), TRUE)
    USE_GPU_PRAGMA = TRUE
    DEFINES += -DCUDA
  endif
endif

#------------------------------------------------------------------------------
# build info
#------------------------------------------------------------------------------

# job_info support
CEXE_headers += $(AMREX_HOME)/Tools/C_scripts/AMReX_buildInfo.H
INCLUDE_LOCATIONS +=  $(AMREX_HOME)/Tools/C_scripts


# we make AMReX_buildInfo.cpp as we make the .o file, so we can delete
# it immediately.  this way if the build is interrupted, we are
# guaranteed to remake it

objForExecs += $(objEXETempDir)/AMReX_buildInfo.o

.FORCE:
.PHONE: .FORCE

# set BUILD_GIT_NAME and BUILD_GIT_DIR if you are building in a
# git-controlled dir not under ML-REACTIONS/
EXTRA_BUILD_INFO :=
ifdef BUILD_GIT_NAME
   EXTRA_BUILD_INFO := --build_git_name "$(BUILD_GIT_NAME)" \
                       --build_git_dir "$(BUILD_GIT_DIR)"
endif

$(objEXETempDir)/AMReX_buildInfo.o: .FORCE
	$(AMREX_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --amrex_home "$(AMREX_HOME)" \
          --COMP "$(COMP)" --COMP_VERSION "$(COMP_VERSION)" \
          --CXX_comp_name "$(CXX)" --CXX_flags "$(CXXFLAGS) $(CPPFLAGS) $(includes)" \
          --F_comp_name "$(F90)" --F_flags "$(F90FLAGS)" \
          --link_flags "$(LDFLAGS)" --libraries "$(libraries)" \
          --MODULES "$(MNAMES)" $(EXTRA_BUILD_INFO) \
          --GIT "$(MLREACTIONS_HOME) $(AMREX_HOME)"
	$(SILENT) $(CCACHE) $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $(CXXEXEFLAGS) AMReX_buildInfo.cpp -o $(objEXETempDir)/AMReX_buildInfo.o
	$(SILENT) $(RM) AMReX_buildInfo.cpp


#------------------------------------------------------------------------------
# finish up
#------------------------------------------------------------------------------

include $(AMREX_HOME)/Tools/GNUMake/Make.rules

ifeq ($(USE_CUDA),TRUE)
ifeq ($(USE_GPU_PRAGMA), TRUE)

#include $(TOP)/Exec/Make.cuda_rules

endif
endif

clean::
	$(SILENT) $(RM) AMReX_buildInfo.cpp
	
clean::
	@if [ -L helm_table.dat ]; then rm -f helm_table.dat; fi


# for debugging.  To see the value of a Makefile variable,
# e.g. Fmlocs, simply do "make print-Fmlocs".  This will print out the
# value.

print-%::
	@echo "$* is $($*)"
	@$(RM) AMReX_buildInfo.cpp
